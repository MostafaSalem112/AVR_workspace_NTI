/*
 * TIMER1_program.c
 *
 *  Created on: Oct 28, 2023
 *      Author: Mostafa_Salem
 */

#include "../../LIB/Bit_Math.h"
#include "../../LIB/STD_Types.h"
#include "../../Services/Mapping/Mapping_interface.h"
#include "TIMER1_private.h"
#include "TIMER1_config.h"
#include "TIMER1_interface.h"

void (*TIMER1_NORMAL_GPfun)(void)=NULL;
void (*TIMER1_CTCA_GPfun)(void)=NULL;
void (*TIMER1_CTCB_GPfun)(void)=NULL;
void (*TIMER1_ICU_GPfun)(void)=NULL;

u32 TIMER,PreLoad,PreScaler;

void TIMER1_voidEnable(){

	TCCR1B->CS1 = CLOCK_PRESCALER;
}

void TIMER1_voidDisable(){

	TCCR1B->CS1 = Timer_Counter_stopped;
}

void TIMER1_voidInitialize(){

	TCCR1A->COM1A = Compare_Output_Mode_A;
	TCCR1A->COM1B = Compare_Output_Mode_B;

	TCCR1A->FOC1A = Force_Output_Compare_A_STATUS;
	TCCR1A->FOC1B = Force_Output_Compare_B_STATUS;

	TCCR1A->WGM1 = ((TIMER_MODE>>0)&(0b11));
	TCCR1B->WGM1 = ((TIMER_MODE>>2)&(0b11));

	TCCR1B->ICNC1 = Input_Capture_Noise_Canceler_STATUS;

	TCCR1B->ICES1 = Input_Capture_Edge;

	TIMSK1->TICIE1 = Input_Capture_Interrupt_STATUS;
	TIMSK1->OCIE1A = Output_Compare_A_Match_Interrupt_STATUS;
	TIMSK1->OCIE1B = Output_Compare_B_Match_Interrupt_STATUS;
	TIMSK1->TOIE1 = Overflow_Interrupt_STATUS;
}

void TIMER1_voidPreLoad(u16 Copy_u8Value){

	TCNT1 = Copy_u8Value;
}

void TIMER1_voidSetOCR1A(u16 Copy_u16Value){

	OCR1A = Copy_u16Value;
}

void TIMER1_voidSetOCR1B(u16 Copy_u16Value){

	OCR1B = Copy_u16Value;
}

void TIMER1_voidSetICR1(u16 Copy_u16Value){

	ICR1 = Copy_u16Value;
}

void TIMER1_voidSetTimer(u32 Copy_u32TimeMS){

	u32 MAX_NUM;

	#if TIMER_MODE == Normal_MODE
		MAX_NUM=MAX_16BIT_REG;
	#elif TIMER_MODE == CTC_OCR1A
		MAX_NUM=OCR1A;
	#elif TIMER_MODE == CTC_ICR1
		MAX_NUM=ICR1;
	#endif

	#if CLOCK_PRESCALER == No_prescaling
		PreScaler = 1;
	#elif CLOCK_PRESCALER == clkIO_8
		PreScaler = 8;
	#elif CLOCK_PRESCALER == clkIO_64
		PreScaler = 64;
	#elif CLOCK_PRESCALER == clkIO_256
		PreScaler = 256;
	#elif CLOCK_PRESCALER == 1024
		PreScaler = 1024;
	#endif

	f64 Tick_Time=((f64)PreScaler*MICROS_IN_SEC)/SYSTEM_CLOCK_FREQUENCY;
	f64 OverFlow_Time=Tick_Time*MAX_NUM;

	TIMER=(Copy_u32TimeMS*MICROS_IN_MILLI)/OverFlow_Time;
	f64 remainder=((Copy_u32TimeMS*MICROS_IN_MILLI)/OverFlow_Time)-TIMER;
	PreLoad=(1-remainder)*MAX_NUM;

	TIMER1_voidPreLoad(PreLoad);
}

void TIMER1_voidGeneratePWM(u32 Copy_u32Period,u8 Copy_u8DutyCycle){

	#if CLOCK_PRESCALER == No_prescaling
		PreScaler = 1;
	#elif CLOCK_PRESCALER == clkIO_8
		PreScaler = 8;
	#elif CLOCK_PRESCALER == clkIO_64
		PreScaler = 64;
	#elif CLOCK_PRESCALER == clkIO_256
		PreScaler = 256;
	#elif CLOCK_PRESCALER == 1024
		PreScaler = 1024;
	#endif

	f64 Tick_Time=((f64)PreScaler*MICROS_IN_SEC)/SYSTEM_CLOCK_FREQUENCY;
	f64 period=Tick_Time*MAX_NUM;
}

void TIMER1_ICU_SetCallBack(void(*ptr)(void)){

	TIMER1_ICU_GPfun=ptr;
}

void TIMER1_CTCA_SetCallBack(void(*ptr)(void)){

	TIMER1_CTCA_GPfun=ptr;
}

void TIMER1_CTCB_SetCallBack(void(*ptr)(void)){

	TIMER1_CTCB_GPfun=ptr;
}

void TIMER1_NORMAL_SetCallBack(void(*ptr)(void)){

	TIMER1_NORMAL_GPfun=ptr;
}
